name: Upgrade Test Workflow

on:
  issue_comment:
    types:
      - created

  pull_request:
    branches:
      - main

jobs:
  upgrade-test:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/upgrade-test'))
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Clone provider-upgrade-test repo
        run: |
          git clone https://${{ secrets.UPGRADE_TEST_GT_TOKEN }}@${{ secrets.UPGRADE_TEST_GIT_REPO_HOST }}/cloud-orchestration/provider-upgrade-test.git
          echo "Repository provider-upgrade-test cloned successfully."
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
        with:
            version: v0.15.1
            install: true
      - name: Build Images
        run: make build
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"
          DOCKER_REGISTRY: ${{ vars.REGISTRY_URL }}
          BUILD_REGISTRY: ${{ vars.REGISTRY_URL }}
      - name: Login to Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ vars.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Artifacts to DockerHub
        run: make publish BRANCH_NAME=${GITHUB_REF##*/}
        env:
          DOCKER_REGISTRY: ${{ vars.REGISTRY_URL }}
          BUILD_REGISTRY: ${{ vars.REGISTRY_URL }}
           

      - name: Install CLI Tools
        run: |
          echo "Installing Kind..."
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

          echo "Installing Kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          echo "Installing Chainsaw..."
          curl -LO https://github.com/kyverno/chainsaw/releases/download/v0.2.12/chainsaw_linux_amd64.tar.gz && \
          tar -xzvf chainsaw_linux_amd64.tar.gz && \
          chmod +x chainsaw && \
          sudo mv chainsaw /usr/local/bin/chainsaw && \
          chainsaw version

          echo "Installing sed..."
          sudo apt-get update && sudo apt-get install -y sed

          echo "Installing jq..."
          sudo apt-get install -y jq

          echo "Installing yq..."
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

          echo "All tools installed successfully."

      - name: Extract params
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "to_test_source=${{ github.event.inputs.source }}" >> $GITHUB_ENV
            echo "to_test_target=${{ github.event.inputs.target }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            if [[ "$COMMENT_BODY" =~ /upgrade-test ]]; then
              if [[ "$COMMENT_BODY" =~ source=([^\ ]+) ]]; then
                  echo "to_test_source=${BASH_REMATCH[1]}" >> $GITHUB_ENV
                  echo "to_test_source=$to_test_source"
              fi
              if [[ "$COMMENT_BODY" =~ target=([^\ ]+) ]]; then
                  echo "to_test_target=${BASH_REMATCH[1]}" >> $GITHUB_ENV
                  echo "to_test_target=$to_test_target"
              fi
            fi
          fi
      - name: Run upgrade test
        run: |
          cd provider-upgrade-test
          echo "Running upgrade test..."
          PR_BUILD_VERSION=$(git rev-parse HEAD)
          echo "version is $PR_BUILD_VERSION"
          REGISTRY=ghcr.io/sap/crossplane-provider-btp/crossplane/provider-btp && ./provider-test.sh upgrade-test --target "ghcr.io/vickysuch/crossplane-provider-btp:${PR_BUILD_VERSION}" --source ghcr.io/sap/crossplane-provider-btp/crossplane/provider-btp:${to_test_target} --provider provider-btp   --initialize providers/provider-btp/scripts/initialize.sh --cleanup  providers/provider-btp/scripts/cleanup.sh
        env: 
          CLIENT_ID: ${{ secrets.UPGRADE_TEST_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.UPGRADE_TEST_CLIENT_SECRET }}
          TECH_USER_PASSWORD: ${{ secrets.UPGRADE_TEST_TECH_USER_PW }}

          